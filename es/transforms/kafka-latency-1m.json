{
    "source": {
        "index": "traces-*",
        "query": {
            "bool": {
                "filter": {
                    "bool" : {
                        "must" : [
                            {
                                "exists": {
                                    "field": "event.ingested"
                                }
                            },
                            {
                                "range": {
                                    "event.ingested": {
                                        "gte": "now-1h/m"
                                    }
                                }
                            },
                            {
                                "exists": {
                                    "field": "trace.id"
                                }
                            },
                            {
                                "exists": {
                                    "field": "span.id"
                                }
                            },
                            {
                                "exists": {
                                    "field": "service.name"
                                }
                            },
                            {
                                "exists": {
                                    "field": "timestamp.us"
                                }
                            }
                        ],
                        "should": [
                            { 
                                "bool": {
                                    "must": [
                                        {
                                            "term": {
                                                "span.type": "messaging"
                                            }
                                        },
                                        {
                                            "exists": {
                                                "field": "span.message.queue.name"
                                            }
                                        }
                                    ]
                                }
                            },
                            { 
                                "bool": {
                                    "must": [
                                        {
                                            "term": {
                                                "transaction.type": "messaging"
                                            }
                                        },
                                        {
                                            "exists": {
                                                "field": "transaction.message.queue.name"
                                            }
                                        }
                                    ]
                                }
                            }
                        ],
                        "minimum_should_match" : 1
                    }
                }
            }
        }
    },
    "dest": {
        "index": "kafka-latency-1m"
    },
    "sync": {
        "time": {
            "field": "event.ingested",
            "delay": "60s"
        }
    },
    "pivot": {
        "group_by": {
            "trace.id": {
                "terms": {
                    "field": "trace.id"
                }
            }
        },
        "aggregations": {
            "paths": {
                "scripted_metric": {
                    "init_script": "state.docs = []",
                    "map_script": "
                        Map span = [
                            '@timestamp':doc['@timestamp'].value,
                            'timestamp.us':doc['timestamp.us'].value,
                            'service.name':doc['service.name'].value,
                            'span.id':doc['span.id'].value
                        ];

                        if (doc.containsKey('parent.id') && (doc['parent.id'].size() > 0)) {
                            span['parent.id'] = doc['parent.id'].value;
                        }

                        /* copy message queue name */
                        /* bookend queues with exit (enqueue) and enter (dequeue) labels */
                        if (doc.containsKey('span.message.queue.name') && (doc['span.message.queue.name'].size() > 0)) {
                            span['message.queue.name'] = doc['span.message.queue.name'].value;
                            if (doc['span.action'].value.equals('publish')) {
                                span['kind'] = 'exit';
                            } else {
                                span['kind'] = 'enter';
                            }
                        }
                        else if (doc.containsKey('transaction.message.queue.name') && (doc['transaction.message.queue.name'].size() > 0)) {
                            span['message.queue.name'] = doc['transaction.message.queue.name'].value;
                            if (doc['labels.messaging_operation'].value.equals('process')) {
                                span['kind'] = 'enter';
                            } else {
                                span['kind'] = 'exit';
                            }
                        }

                        span['attributes'] = new HashMap();
                        if (params['_source'].keySet().contains('labels')) {
                            def labels = params['_source']['labels'].keySet();
                            for (label in labels) {
                                if (label.contains('com_example')) {
                                    span['attributes'][label] = params['_source']['labels'][label];
                                }
                            }
                        }

                        span['parent'] = null;
                        span['children'] = [];
                        
                        /* copy all docs from this shard */
                        state.docs.add(span);
                    ",
                    "combine_script": "return state.docs;",
                    "reduce_script": "
                        /* build graph */
                        List attach_to_children(def children, def parent) {
                            def unassigned_children = [];
                            /* for all remaining children */
                            for (child in children) {
                                /* assign child to parent */
                                if (child['parent.id'].equals(parent['span.id'])) {
                                    parent['children'].add(child);
                                    child['parent'] = parent;
                                } else {
                                    unassigned_children.add(child);
                                }
                            }
                            return unassigned_children;
                        } 

                        /* build paths */
                        void build_paths(def path, def node, def out_paths, def out_queues, def root_time, def enqueue_time, def enqueue_service, def depth) {
                            /* exiting queue, record hop-by-hop metrics */
                            if ((node['kind'].equals('enter')) && (enqueue_time > 0)) {
                                def new_queue_doc = new HashMap();
                                new_queue_doc['path'] = enqueue_service + '-' + node['service.name'];
                                new_queue_doc['duration.us'] = node['timestamp.us'] - enqueue_time;
                                out_queues.add(new_queue_doc);
                                depth = depth + 1;
                            }
                        
                            /* leaf node, record e2e metrics */
                            if (node['children'].size() == 0) {
                                def new_path = path;
                                if (!new_path.equals('')) {
                                    new_path += '-';
                                }
                                new_path += node['service.name'];

                                def new_path_doc = new HashMap();
                                new_path_doc['path'] = new_path;
                                new_path_doc['duration.us'] = node['timestamp.us'] - root_time;
                                new_path_doc['depth'] = depth;
                                out_paths.add(new_path_doc);
                                return;
                            }

                            /* middle node, build path */
                            for (child in node['children']) {
                                def new_path = path;
                                /* entering queue */
                                if (node['kind'].equals('exit')) {
                                    if (!new_path.equals('')) {
                                        new_path += '-';
                                    }
                                    new_path += node['service.name'] + '-' + node['message.queue.name'];

                                    /* entering queue, record time for hop-by-hop metrics */
                                    enqueue_time = node['timestamp.us'];
                                    enqueue_service = node['service.name'];
                                }
                                /* recurse down this path */
                                build_paths(new_path, child, out_paths, out_queues, root_time, enqueue_time, enqueue_service, depth);
                            }
                        }

                        /* collapse shards */
                        def spans = [];
                        /* for all shards */
                        for (s in states) {
                            /* for all docs in that shard */
                            for (span in s) {
                                spans.add(span);
                            }
                        }

                        def out_doc = new HashMap();

                        /* no docs; unexpected */
                        if (spans.size() == 0) {
                            return out_doc;
                        }

                        /* build graph */
                        def unassigned_children = spans;
                        for (parent in spans) {
                            /* attach parent to children */
                            unassigned_children = attach_to_children(unassigned_children, parent);
                        }

                        /* find root */
                        def root = null;
                        for (span in spans) {
                            /* possible root */
                            if (span['parent'] == null) {
                                if (root == null) {
                                    root = span;
                                }
                                /* if multiple isolated spans, incomplete trace */
                                else {
                                    return out_doc;
                                }
                            }
                        }     

                        /* build paths */
                        def path = '';
                        def out_paths = [];
                        def out_queues = [];
                        def root_time = root['timestamp.us'];
                        build_paths(path, root, out_paths, out_queues, root_time, 0, '', 0);

                        /* output doc */
                        out_doc['timestamp'] = root['@timestamp'];
                        
                        def rand = new Random();

                        if (out_paths.size() > 0) {
                            /* randomly feature 1 e2e metric */
                            def rand_selection = rand.nextInt(out_paths.size());
                            out_doc['e2e.path'] = out_paths[rand_selection].path;
                            out_doc['e2e.duration.us'] = out_paths[rand_selection]['duration.us'];
                            out_doc['e2e.depth'] = out_paths[rand_selection]['depth'];

                            /* record all e2e samples */
                            for (doc in out_paths) {
                                out_doc['sample.e2e.' + doc.path] = doc['duration.us'];
                            }
                        }

                        if (out_queues.size() > 0) {
                            /* randomly feature 1 hop-by-hop metric */
                            def rand_selection = rand.nextInt(out_queues.size());
                            out_doc['hop.path'] = out_queues[rand_selection].path;
                            out_doc['hop.duration.us'] = out_queues[rand_selection]['duration.us'];

                            /* record all hop-by-hop samples */
                            for (doc in out_queues) {
                                out_doc['sample.hop.' + doc.path] = doc['duration.us'];
                            }
                        }

                        out_doc['root.name'] = root['service.name'];
                        def keys = root['attributes'].keySet();
                        for (key in keys) {
                            out_doc[key] = root['attributes'][key];
                        }

                        return out_doc;
                    "
                }
            }
        }
    }
}